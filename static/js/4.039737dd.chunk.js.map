{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx"],"names":["module","exports","ContactForm","params","dispatch","useDispatch","items","useSelector","contactsSelectors","getItems","useState","name","setName","number","setNumber","notifyWarn","text","toast","warn","handleChange","e","currentTarget","value","replace","reset","MyButton","styled","MaterialButton","width","backgroundColor","color","boxShadow","className","styles","form","onSubmit","preventDefault","newContact","toLowerCase","find","contact","isValidContact","contactsOperations","addContact","success","TextField","input","size","label","variant","type","onChange","autoComplete","fontSize","padding","MyListItem","ListItem","borderBottom","display","ContactItem","onDelete","item","ListItemText","info","ListItemSecondaryAction","delete","onClick","ContactList","contacts","deleteContact","List","map","id","connect","state","filteredItems","contactId","Filter","filter","getFilter","contactsActions","changeFilter","useEffect","resetFilter","ContactsView","fetchContacts","title","contactsSection","length","position","autoClose","newestOnTop","limit","transition","Zoom"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,6B,oBCA3DD,EAAOC,QAAU,CAAC,KAAO,4B,oBCAzBD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,oBCAhED,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,gBAAkB,wC,uLCyHzD,SAASC,EAAYC,GAClC,IAAMC,EAAWC,cACXC,EAAQC,YAAYC,IAAkBC,UAFF,EAGlBC,mBAAS,IAHS,mBAGnCC,EAHmC,KAG7BC,EAH6B,OAIdF,mBAAS,IAJK,mBAInCG,EAJmC,KAI3BC,EAJ2B,KAMpCC,EAAa,SAAAC,GAAI,OAAIC,IAAMC,KAAKF,IAGhCG,EAAe,SAAAC,GAAM,IAAD,EACAA,EAAEC,cAAlBV,EADgB,EAChBA,KAAMW,EADU,EACVA,MAEVV,EADK,WAATD,EACY,eAAGA,EAAOW,EAAMC,QAAQ,UAAW,KACnC,eAAGZ,EAAOW,KAmBlBE,EAAQd,mBAASE,EAAQ,IAAKE,EAAU,KAYxCW,EAAWC,YAAOC,IAAPD,CAAuB,CACpCE,MAAO,cACPC,gBAAiB,QACjBC,MAAO,sBACPC,UAAW,wCAGf,OACI,uBAAMC,UAAWC,IAAOC,KAAMC,SAlBb,SAAAf,GAEnB,IA7BoBJ,EA4BpBI,EAAEgB,iBAnBmB,SAAAC,GACrB,IAAM1B,EAAO0B,EAAW1B,KAAK2B,cACrBzB,EAAWwB,EAAXxB,OAGR,OAFAP,IAEa,KAATK,GAA0B,KAAXE,GACjBE,EAAW,iCACJ,GAGLT,EAAMiC,MAAK,SAAAC,GAAO,OAAIA,EAAQ7B,KAAK2B,gBAAkB3B,MACvDI,EAAW,GAAD,OAAIsB,EAAW1B,KAAf,8BACH,QAFT,EAWK8B,CADc,CAAC9B,OAAME,aAExBT,EAASsC,IAAmBC,WAAWhC,EAAME,IA/B3BG,EAgCJ,qBAhCYC,IAAM2B,QAAQ5B,GAiCxCQ,MAYA,UACE,cAACqB,EAAA,EAAD,CACEb,UAAWC,IAAOa,MAClBC,KAAK,QACLC,MAAM,OACNC,QAAQ,WACRC,KAAK,OACLvC,KAAK,OACLW,MAAOX,EACPwC,SAAUhC,EACViC,aAAa,QAGf,cAACP,EAAA,EAAD,CACEE,KAAK,QACLC,MAAM,SACNC,QAAQ,WACRjB,UAAWC,IAAOa,MAClBI,KAAK,MACLvC,KAAK,SACLW,MAAOT,EACPsC,SAAUhC,EACViC,aAAa,QAGf,cAAC3B,EAAD,CAAUyB,KAAK,SAAf,4B,iDC7LFzB,EAAWC,YAAOC,IAAPD,CAAuB,CACtCG,gBAAiB,QACjBwB,SAAU,OACVvB,MAAO,sBACPC,UAAW,sCACXuB,QAAS,YAGLC,EAAa7B,YAAO8B,IAAP9B,CAAiB,CAClC4B,QAAS,iBACTG,aAAc,kBACdC,QAAS,iBAqBIC,EAlBK,SAAC,GAAD,IAAGhD,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAQ+C,EAAjB,EAAiBA,SAAjB,OAClB,eAACL,EAAD,CAAYvB,UAAWC,IAAO4B,KAA9B,UACE,eAACC,EAAA,EAAD,CAAc9B,UAAWC,IAAO8B,KAAhC,UAAuCpD,EAAvC,OACA,cAACmD,EAAA,EAAD,CAAc9B,UAAWC,IAAO8B,KAAhC,SAAuClD,IACvC,cAACmD,EAAA,EAAD,UACE,cAAC,EAAD,CAAUhC,UAAWC,IAAOgC,OAAQC,QAASN,EAAUV,KAAK,SAA5D,0B,SCFSiB,EArBK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAC/B,OACE,cAACC,EAAA,EAAD,UACGF,GACCA,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAI7D,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACX,cAAC,EAAD,CAEEF,KAAMA,EACNE,OAAQA,EACR+C,SAAU,kBAAMS,EAAcG,KAHzBA,SCCFC,eATS,SAAAC,GAAK,MAAK,CAChCN,SAAU5D,IAAkBmE,cAAcD,OAGjB,SAAAtE,GAAQ,MAAK,CACtCiE,cAAe,SAAAO,GAAS,OACtBxE,EAASsC,IAAmB2B,cAAcO,QAG/BH,CAA6CN,G,kBC6B7C,SAASU,IACtB,IAAMzE,EAAWC,cACXyE,EAASvE,YAAYC,IAAkBuE,WACvC5B,EAAW/C,EAAS4E,IAAgBC,gBAK1C,OAJAC,qBAAU,WACR9E,EAAS4E,IAAgBG,iBACxB,CAAC/E,IAGA,cAACyC,EAAA,EAAD,CACEb,UAAWC,IAAOa,MAClBI,KAAK,OACL5B,MAAOwD,EACP3B,SAAUA,EACVH,MAAM,wBACND,KAAK,QACLE,QAAQ,a,6BCWD,SAASmC,IACtB,IAAMhF,EAAWC,cACXC,EAAQC,YAAYC,IAAkBC,UAK5C,OAJAyE,qBAAU,WACR9E,EAASsC,IAAmB2C,mBAC3B,CAACjF,IAGA,qCACE,oBAAI4B,UAAWC,IAAOqD,MAAtB,uBACA,cAACpF,EAAD,IACA,oBAAI8B,UAAWC,IAAOqD,MAAtB,sBACA,0BAAStD,UAAWC,IAAOsD,gBAA3B,UACGjF,EAAMkF,OAAS,GAAK,cAACX,EAAD,IACpBvE,EAAMkF,OAAS,EACd,cAAC,EAAD,IAEA,qFAEF,cAAC,IAAD,CACEC,SAAS,aACTC,UAAW,IACXC,aAAW,EACXC,MAAO,EACPC,WAAYC","file":"static/js/4.039737dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__iQYp3\",\"input\":\"ContactForm_input__3e9PH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactItem_info__1WUSh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTitle\":\"Filter_formTitle__2ENFr\",\"input\":\"Filter_input__1TNDJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsView_title__2VvTn\",\"contactsSection\":\"ContactsView_contactsSection__3caeo\"};","/*import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport MaterialButton from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  notifyWarn = text => toast.warn(text);\r\n  notifySuccess = text => toast.success(text);\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'number'\r\n      ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\r\n      : this.setState({ [name]: value });\r\n  };\r\n\r\n  isValidContact = newContact => {\r\n    const name = newContact.name.toLowerCase();\r\n    const { number } = newContact;\r\n    const { items } = this.props;\r\n\r\n    if (name === '' || number === '') {\r\n      this.notifyWarn(`Please enter name and number`);\r\n      return true;\r\n    }\r\n\r\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\r\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newContact = { ...this.state };\r\n    if (!this.isValidContact(newContact)) {\r\n      const { addContact } = this.props;\r\n\r\n      addContact(newContact);\r\n      this.notifySuccess('Added successfully');\r\n      this.reset();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    const MyButton = styled(MaterialButton)({\r\n      width: 'fit-content',\r\n      backgroundColor: 'olive',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\r\n    });\r\n\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <TextField\r\n          className={styles.input}\r\n          size=\"small\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange}\r\n          id={this.nameInputId}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Number\"\r\n          variant=\"outlined\"\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={this.handleChange}\r\n          id={this.numberInputId}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <MyButton type=\"submit\">Add contact</MyButton>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactForm;*/\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport styles from './ContactForm.module.css';\r\nimport { toast } from 'react-toastify';\r\nimport MaterialButton from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nexport default function ContactForm(params) {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(contactsSelectors.getItems);\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const notifyWarn = text => toast.warn(text);\r\n  const notifySuccess = text => toast.success(text);\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'number'\r\n      ? setName({ [name]: value.replace(/[^\\d-]/g, '') })\r\n      : setName({ [name]: value });\r\n  };\r\n\r\n  const isValidContact = newContact => {\r\n    const name = newContact.name.toLowerCase();\r\n    const { number } = newContact;\r\n    items();\r\n\r\n    if (name === '' || number === '') {\r\n      notifyWarn(`Please enter name and number`);\r\n      return true;\r\n    }\r\n\r\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\r\n      notifyWarn(`${newContact.name} is already in contacts.`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const reset = useState(setName(''), setNumber(''));\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newContact = {name, number};\r\n    if (!isValidContact(newContact)) {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n      notifySuccess('Added successfully');\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const MyButton = styled(MaterialButton)({\r\n      width: 'fit-content',\r\n      backgroundColor: 'olive',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\r\n  });\r\n  \r\n  return (\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <TextField\r\n          className={styles.input}\r\n          size=\"small\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Number\"\r\n          variant=\"outlined\"\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <MyButton type=\"submit\">Add contact</MyButton>\r\n      </form>\r\n    );\r\n  }","import React from 'react';\r\nimport styles from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MaterialButton from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst MyButton = styled(MaterialButton)({\r\n  backgroundColor: 'olive',\r\n  fontSize: '10px',\r\n  color: 'rgba(0, 0, 0, 0.87)',\r\n  boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\r\n  padding: '2px 8px',\r\n});\r\n\r\nconst MyListItem = styled(ListItem)({\r\n  padding: '8px 0 8px 10px',\r\n  borderBottom: '1px solid olive',\r\n  display: 'inline-block',\r\n});\r\n\r\nconst ContactItem = ({ name, number, onDelete }) => (\r\n  <MyListItem className={styles.item}>\r\n    <ListItemText className={styles.info}>{name}:</ListItemText>\r\n    <ListItemText className={styles.info}>{number}</ListItemText>\r\n    <ListItemSecondaryAction>\r\n      <MyButton className={styles.delete} onClick={onDelete} type=\"button\">\r\n        Delete\r\n      </MyButton>\r\n    </ListItemSecondaryAction>\r\n  </MyListItem>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport ContactItem from './ContactItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <List>\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => deleteContact(id)}\r\n          />\r\n        ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.filteredItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId =>\r\n    dispatch(contactsOperations.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","/*import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass Filter extends Component {\r\n  componentWillUnmount() {\r\n    this.props.resetFilter();\r\n  }\r\n\r\n  render() {\r\n    const { filter, onChange } = this.props;\r\n\r\n    return (\r\n      <TextField\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onChange}\r\n        label=\"Find contacts by name\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  resetFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;*/\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\r\nimport styles from './Filter.module.css';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(contactsSelectors.getFilter);\r\n  const onChange = dispatch(contactsActions.changeFilter());\r\n  useEffect(() => {\r\n    dispatch(contactsActions.resetFilter());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n      <TextField\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onChange}\r\n        label=\"Find contacts by name\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n      />\r\n    );\r\n}","/*import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport ContactList from '../../components/ContactList';\r\nimport Filter from '../../components/Filter';\r\nimport { ToastContainer, Zoom } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport styles from './ContactsView.module.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <h1 className={styles.title}>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className={styles.title}>Contacts</h2>\r\n        <section className={styles.contactsSection}>\r\n          {items.length > 1 && <Filter />}\r\n          {items.length > 0 ? (\r\n            <ContactList />\r\n          ) : (\r\n            <p>The contact list is empty. Please add a new contact.</p>\r\n          )}\r\n          <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={2000}\r\n            newestOnTop\r\n            limit={3}\r\n            transition={Zoom}\r\n          />\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: contactsSelectors.getItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nContactsView.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  fetchContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);*/\r\n\r\nimport React, { useEffect } from 'react';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport ContactList from '../../components/ContactList';\r\nimport Filter from '../../components/Filter';\r\nimport { ToastContainer, Zoom } from 'react-toastify';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport styles from './ContactsView.module.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(contactsSelectors.getItems);\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n      <>\r\n        <h1 className={styles.title}>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className={styles.title}>Contacts</h2>\r\n        <section className={styles.contactsSection}>\r\n          {items.length > 1 && <Filter />}\r\n          {items.length > 0 ? (\r\n            <ContactList />\r\n          ) : (\r\n            <p>The contact list is empty. Please add a new contact.</p>\r\n          )}\r\n          <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={2000}\r\n            newestOnTop\r\n            limit={3}\r\n            transition={Zoom}\r\n          />\r\n        </section>\r\n      </>\r\n    );\r\n}"],"sourceRoot":""}